
name: Deploy to EC2 or Generate APK
on:
  push:
    branches:
      - stage-app
jobs:
  build:
    name: Build APK
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v2

      - name: Setup java
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 13.x

      - name: Install Cordova
        run: npm install -g cordova

      - name: Install Ionic
        run: npm install -g @ionic/cli

      - name: Install app dependencies
        run: npm install

      - name: Add Android platform
        run: cd xtrack-app/xtrack-app && ionic cordova platform add android@latest

      - name: Build Android Dev APK
        run: cd xtrack-app/xtrack-app && ionic cordova build android

      - name: Build Android Release APK
        run: cd xtrack-app/xtrack-app && ionic cordova build android --release --prod

      - name: Generate the Android App Bundle
        working-directory: ./xtrack-app/xtrack-app/platforms/android/
        run: ./gradlew bundle

      - name: Upload dev APK
        uses: actions/upload-artifact@v1
        with:
          name: app-dev
          path: ./xtrack-app/xtrack-app/platforms/android/app/build/outputs/apk/debug/app-debug.apk

      - name: Upload release bundle
        uses: actions/upload-artifact@v1
        with:
          name: app-release
          path: ./xtrack-app/xtrack-app/platforms/android/app/build/outputs/bundle/release/app.aab


  deploy:
    name: "Deploy to staging"
    runs-on: ubuntu-latest
    # if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    # needs: test
    steps:
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/staging.key
          chmod 600 ~/.ssh/staging.key
          cat >>~/.ssh/config <<END
          Host staging
            HostName $PROD_SERVER
            User $SSH_USER
            IdentityFile ~/.ssh/staging.key
            StrictHostKeyChecking no
          END
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_KEY: ${{ secrets.SSH_KEY }}
          PROD_SERVER: ${{ secrets.PROD_SERVER }}
          

      - name: Restart the application with new docker images
        run: |
            ssh staging 'export MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }} \
             && export MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }} \
             && cd xtrack \
             && git pull origin stage \
             && chmod 777 deploy.sh \
             && ./deploy.sh'
       




      # - name: Check out the source
      #   run: ssh staging 'cd my-application && git fetch && git reset --hard origin/master'

      # - name: Start the server
      #   if: ${{ always() }}
      #   run: ssh staging 'sudo systemctl start my-application'


























 